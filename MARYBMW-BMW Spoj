#include <bits/stdc++.h>

using namespace std;

vector<int> parent,ran;

void make_set(int v){
	parent[v]=v;
	ran[v]=0;
}

int find_set(int v){
	if(v==parent[v])return v;
	return parent[v]=find_set(parent[v]);
}

void union_set(int a,int b){
	a=find_set(a);
	b=find_set(b);
	if(a!=b){
		if(ran[a]<ran[b])
			swap(a,b);
		parent[b]=a;
		if(ran[a]==ran[b])
			ran[a]++;
	}
}

struct edge{
	int u,v;
	long long wt;
	bool operator<(edge const& other){
		return wt>other.wt;
	}
};

int n,m;
vector<edge> edges;
long long int cost=INT_MIN;

int main() {
	// your code goes here
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	int t;
	cin>>t;
	while(t--){
		cin>>n>>m;
		edges.clear();
		ran.clear();
		parent.clear();
		edges.resize(m);
		ran.resize(n);
		parent.resize(n);
		cost=INT_MIN;
		for(int i=0;i<n;i++)
			make_set(i);
		for(int i=0;i<m;i++){
			edge temp;
			int a,b;
			long long x;
			cin>>a>>b>>x;
			a--;b--;
			temp.u=a;
			temp.v=b;
			temp.wt=x;
			if(x>cost)
				cost=x;
			edges.push_back(temp);
		}
    //Sort in descending order
		sort(edges.begin(),edges.end());
		
    
		for(edge e:edges){
			if(find_set(0)==find_set(n-1))break;
			if(find_set(e.u)!=find_set(e.v)){
				cost=e.wt;
				union_set(e.u,e.v);
			}
		}
		if(find_set(0)==find_set(n-1))
			cout<<cost<<endl;
		else
			cout<<"-1"<<endl;
	}
	return 0;
}
